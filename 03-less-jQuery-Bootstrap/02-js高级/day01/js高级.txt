
	


执行上下文、执行上下文栈、预解析、作用域、作用域链、    （打断点）
	

	执行上下文（执行上下文环境）：//全局环境    函数环境
		程序在解析和运行的时候所依赖和使用的环境；
		
		全局执行上下文环境 和 函数执行上下文环境     （全局环境和函数环境）
	
	执行上下文栈：
		程序为了管理执行上下文（确保程序的执行顺序）所创建的一个栈数据结构，被称作执行上下文栈；



	预解析（变量提升）：
		先解析函数：函数重名覆盖
		再解析变量：变量重名忽略

	作用域：(抽象的概念，代码定义的时候作用域就确定死了)
		变量起作用的范围；
		作用域;隔离变量，防止变量命名污染；
		
		作用域定义时候确定

	作用域链：
		真实存在的，作用域链是使用执行上下文当中变量对象所组成的链条结构（数组结构）
		
		查找的时候其实真正是先去自身的变量对象当中查找，如果没有，去上级执行上下文的变量对象当中去查找，直到找到全局执行上下文的变量对象；  函数调用的时候上一级的变量对象其实是在函数定义的时候都已经确定好的******


	程序开始执行：（全局环境和函数环境）

	
	全局执行上下文（分为创建阶段和执行阶段）代码开始执行之前和之后


		1、全局执行上下文压入执行上下文栈）
			创建上下文阶段：
				1、收集变量形成变量对象 （函数 var的变量会收集）
				   预解析（其实在创建变量对象的时候已经做了预解析）
				2、确定this指向（可以认为确定执行者）
				3、创建自身执行上下文的作用域链
					 注意：同时确定函数在调用时候的上级作用域链。（根据ECMA词法去确定，看内部是否引用外部变量确定）

		2、执行全局执行上下文
			执行全局上下文阶段
				为变量真正赋值
				顺着作用域链查找要使用的变量或者函数执行
	函数执行上下文
		1、函数执行上下文压栈
				1、收集变量  （var 形参  arguments  函数）

				2、确定this指向（可以认为确定执行者）
				3、创建自身执行上下文的作用域链
					 注意：同时确定函数在调用时候的上级作用域链。（根据ECMA词法去确定，看内部是否引用外部变量确定）
				
				函数的作用域链：  自己定义的时候已经确定了函数在调用时候的上级作用域链，因此，在函数调用的时候，只需要将	
						自己的变量对象添加到上级作用域链的顶端；就形成自己的作用域链
		
		2、执行函数执行上下文
				为变量真正赋值
				顺着作用域链查找要使用的变量或者函数执行


	全局：创建全局执行上下文--全局执行上下文压栈--执行全局执行上下文--
	函数：创建函数执行上下文--函数执行上下文压栈--执行函数执行上下文--函数执行上下文出栈--
	执行全局执行上下文--全局执行上下文出栈


	



	//预解析  作用域链面试题	
************************************************************************************


	var x = 10;
  	function fn() {
    		console.log(x);
 	}
  	function show(f) {
    		var x = 20;
    		f();
  	}
  	show(fn);

*************************************************************************************

	
	var a;
 	function a() {}
  		
  	console.log(typeof a)

*************************************************************************************
	
  	if (!(b in window)) {
    		var b = 1;
  	}
  	console.log(b)//

*************************************************************************************
	

	var c = 1;
	 	

	
	function c(c) {
    		console.log(c)
    		var c = 3
  	}

  	c(2) 


*************************************************************************************

	
  	
	var fn = function () {
    		console.log(fn)
  	}
  	fn()

	
	function fn(){console.log(fn)};
	fn();



	

*************************************************************************************
	
	
  	var obj = {
    		fn2: function () {
			
      			console.log(fn2)//
    		}
  	}


  	obj.fn2()

	

*************************************************************************************










